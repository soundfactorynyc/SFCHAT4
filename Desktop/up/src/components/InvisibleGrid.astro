---
// Invisible Grid - AI-Controlled Magic System
// 64 invisible boxes that AI can activate with random effects

export interface Props {
  aiEnabled?: boolean;
  effectTypes?: string[];
}

const { aiEnabled = true, effectTypes = [] } = Astro.props;
---

<div class="invisible-grid-container">
  <!-- 64 Invisible Boxes (8x8 Grid) -->
  <div class="invisible-grid" id="invisibleGrid">
    {[...Array(64)].map((_, i) => (
      <div 
        class="invisible-box" 
        data-box-id={i + 1}
        data-row={Math.floor(i / 8) + 1}
        data-col={(i % 8) + 1}
        id={`box-${i + 1}`}
      >
        <!-- Box content will be generated by AI -->
      </div>
    ))}
  </div>
  
  <!-- AI Control Panel (Hidden) -->
  <div class="ai-control-panel" id="aiPanel">
    <button class="ai-btn" data-action="start">Start AI Magic</button>
    <button class="ai-btn" data-action="stop">Stop AI</button>
    <button class="ai-btn" data-action="chaos">CHAOS MODE</button>
  </div>
</div>

<style>
  .invisible-grid-container {
    position: fixed;
    inset: 0;
    pointer-events: none;
    z-index: 50;
  }

  /* 8x8 Grid of Invisible Boxes */
  .invisible-grid {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: grid;
    grid-template-columns: repeat(8, 1fr);
    grid-template-rows: repeat(8, 1fr);
    gap: 2px;
    padding: 20px;
  }

  /* Individual Invisible Box */
  .invisible-box {
    background: transparent;
    border: none;
    position: relative;
    opacity: 0;
    transition: all 0.3s ease;
    pointer-events: none;
  }

  /* Box Activation States */
  .invisible-box.activated {
    opacity: 1;
    pointer-events: auto;
    animation: boxActivate 0.5s ease-out;
  }

  /* Window Opening Effects */
  .invisible-box.window-straight {
    background: linear-gradient(45deg, #1a1a1a, #333);
    border: 2px solid #666;
    border-radius: 8px;
    animation: windowSlideOpen 0.8s ease-out;
  }

  .invisible-box.window-blowout {
    background: radial-gradient(circle, #ff4444, #aa0000);
    border: 3px solid #ff6666;
    border-radius: 50%;
    animation: windowExplode 0.6s ease-out;
  }

  .invisible-box.character-jump {
    background: linear-gradient(90deg, #4a4a4a, #666);
    border: 2px solid #888;
    border-radius: 4px;
    animation: characterJump 1.2s ease-out;
  }

  .invisible-box.rope-drop {
    background: linear-gradient(180deg, #8B4513, #654321);
    border: 2px solid #A0522D;
    border-radius: 2px;
    animation: ropeDrop 1.5s ease-out;
  }

  .invisible-box.portal-open {
    background: radial-gradient(circle, #00ffff, #0088ff);
    border: 3px solid #00ccff;
    border-radius: 50%;
    animation: portalOpen 1s ease-out;
  }

  .invisible-box.lightning {
    background: linear-gradient(45deg, #ffff00, #ffaa00);
    border: 2px solid #ffdd00;
    border-radius: 4px;
    animation: lightningStrike 0.4s ease-out;
  }

  /* Animation Keyframes */
  @keyframes boxActivate {
    0% { 
      opacity: 0; 
      transform: scale(0.5) rotate(180deg); 
    }
    50% { 
      opacity: 0.8; 
      transform: scale(1.2) rotate(90deg); 
    }
    100% { 
      opacity: 1; 
      transform: scale(1) rotate(0deg); 
    }
  }

  @keyframes windowSlideOpen {
    0% { 
      transform: scaleX(0); 
      opacity: 0; 
    }
    100% { 
      transform: scaleX(1); 
      opacity: 1; 
    }
  }

  @keyframes windowExplode {
    0% { 
      transform: scale(0) rotate(0deg); 
      opacity: 0; 
    }
    50% { 
      transform: scale(1.5) rotate(180deg); 
      opacity: 1; 
    }
    100% { 
      transform: scale(1) rotate(360deg); 
      opacity: 0.8; 
    }
  }

  @keyframes characterJump {
    0% { 
      transform: translateY(0) scale(1); 
      opacity: 0; 
    }
    30% { 
      transform: translateY(-20px) scale(1.1); 
      opacity: 1; 
    }
    70% { 
      transform: translateY(10px) scale(0.9); 
      opacity: 1; 
    }
    100% { 
      transform: translateY(0) scale(1); 
      opacity: 0.7; 
    }
  }

  @keyframes ropeDrop {
    0% { 
      transform: translateY(-100%) scaleY(0); 
      opacity: 0; 
    }
    100% { 
      transform: translateY(0) scaleY(1); 
      opacity: 1; 
    }
  }

  @keyframes portalOpen {
    0% { 
      transform: scale(0) rotate(0deg); 
      opacity: 0; 
    }
    50% { 
      transform: scale(1.3) rotate(180deg); 
      opacity: 0.8; 
    }
    100% { 
      transform: scale(1) rotate(360deg); 
      opacity: 1; 
    }
  }

  @keyframes lightningStrike {
    0% { 
      transform: scale(0) skew(0deg); 
      opacity: 0; 
    }
    25% { 
      transform: scale(1.5) skew(10deg); 
      opacity: 1; 
    }
    50% { 
      transform: scale(0.8) skew(-5deg); 
      opacity: 0.8; 
    }
    100% { 
      transform: scale(1) skew(0deg); 
      opacity: 0.6; 
    }
  }

  /* AI Control Panel - Smaller, inside building */
  .ai-control-panel {
    position: absolute;
    bottom: 10px;
    right: 10px;
    display: flex;
    gap: 5px;
    opacity: 0.3;
    transition: opacity 0.3s ease;
    pointer-events: auto;
  }

  .ai-control-panel:hover {
    opacity: 1;
  }

  .ai-btn {
    background: #000;
    color: #fff;
    border: 1px solid #333;
    padding: 4px 8px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 10px;
    transition: all 0.2s ease;
  }

  .ai-btn:hover {
    background: #333;
    transform: scale(1.05);
  }

  .ai-btn:active {
    transform: scale(0.95);
  }

  /* Mobile Responsive */
  @media (max-width: 768px) {
    .invisible-grid {
      gap: 1px;
      padding: 10px;
    }
  }
</style>

<script>
  class InvisibleGridAI {
    constructor() {
      this.isActive = false;
      this.activationInterval = null;
      this.chaosMode = false;
      this.effectTypes = [
        'window-straight',
        'window-blowout', 
        'character-jump',
        'rope-drop',
        'portal-open',
        'lightning'
      ];
      this.init();
    }

    init() {
      this.setupControls();
      this.setupWebSocket();
    }

    setupControls() {
      document.querySelectorAll('.ai-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const action = e.target.dataset.action;
          switch(action) {
            case 'start':
              this.startAI();
              break;
            case 'stop':
              this.stopAI();
              break;
            case 'chaos':
              this.chaosMode = !this.chaosMode;
              e.target.textContent = this.chaosMode ? 'NORMAL MODE' : 'CHAOS MODE';
              break;
          }
        });
      });
    }

    setupWebSocket() {
      // Connect to backend for AI control
      const ws = new WebSocket('ws://localhost:8080/invisible-grid');
      
      ws.onopen = () => {
        console.log('Connected to Invisible Grid AI');
      };

      ws.onmessage = (event) => {
        const data = JSON.parse(event.data);
        this.handleAICommand(data);
      };

      ws.onerror = (error) => {
        console.log('WebSocket error, using local AI simulation');
        this.startLocalAI();
      };
    }

    startAI() {
      this.isActive = true;
      this.activateRandomBox();
      
      // Random activation interval
      const interval = this.chaosMode ? 500 : 2000;
      this.activationInterval = setInterval(() => {
        this.activateRandomBox();
      }, interval);
    }

    stopAI() {
      this.isActive = false;
      if (this.activationInterval) {
        clearInterval(this.activationInterval);
        this.activationInterval = null;
      }
      this.deactivateAllBoxes();
    }

    activateRandomBox() {
      if (!this.isActive) return;

      // Pick random box (1-64)
      const boxId = Math.floor(Math.random() * 64) + 1;
      const effect = this.getRandomEffect();
      
      this.activateBox(boxId, effect);
      
      // Auto-deactivate after effect duration
      setTimeout(() => {
        this.deactivateBox(boxId);
      }, this.getEffectDuration(effect));
    }

    activateBox(boxId, effectType) {
      const box = document.getElementById(`box-${boxId}`);
      if (!box) return;

      box.classList.add('activated', effectType);
      
      // Add effect-specific content
      this.addEffectContent(box, effectType);
      
      // Log activation for debugging
      console.log(`Box ${boxId} activated with ${effectType}`);
    }

    deactivateBox(boxId) {
      const box = document.getElementById(`box-${boxId}`);
      if (!box) return;

      box.classList.remove('activated', ...this.effectTypes);
      box.innerHTML = '';
    }

    deactivateAllBoxes() {
      document.querySelectorAll('.invisible-box').forEach(box => {
        box.classList.remove('activated', ...this.effectTypes);
        box.innerHTML = '';
      });
    }

    getRandomEffect() {
      return this.effectTypes[Math.floor(Math.random() * this.effectTypes.length)];
    }

    getEffectDuration(effectType) {
      const durations = {
        'window-straight': 3000,
        'window-blowout': 2000,
        'character-jump': 4000,
        'rope-drop': 5000,
        'portal-open': 3500,
        'lightning': 1500
      };
      return durations[effectType] || 3000;
    }

    addEffectContent(box, effectType) {
      const content = {
        'window-straight': 'ü™ü',
        'window-blowout': 'üí•',
        'character-jump': 'üèÉ‚Äç‚ôÇÔ∏è',
        'rope-drop': 'ü™¢',
        'portal-open': 'üåÄ',
        'lightning': '‚ö°'
      };
      
      box.innerHTML = `<div style="font-size: 24px; text-align: center; line-height: 1;">${content[effectType] || '‚ú®'}</div>`;
    }

    handleAICommand(data) {
      switch(data.type) {
        case 'activate':
          this.activateBox(data.boxId, data.effect);
          break;
        case 'deactivate':
          this.deactivateBox(data.boxId);
          break;
        case 'chaos':
          this.chaosMode = data.enabled;
          break;
        case 'pattern':
          this.executePattern(data.pattern);
          break;
      }
    }

    executePattern(pattern) {
      pattern.forEach(({boxId, effect, delay}) => {
        setTimeout(() => {
          this.activateBox(boxId, effect);
        }, delay);
      });
    }

    startLocalAI() {
      // Fallback local AI simulation
      console.log('Starting local AI simulation');
      this.startAI();
    }
  }

  // Initialize Invisible Grid AI
  new InvisibleGridAI();
</script>
